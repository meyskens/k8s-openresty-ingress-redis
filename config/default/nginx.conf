user www-data;
worker_processes 4;
pid /run/nginx.pid;
worker_rlimit_nofile 1000000;
daemon off;

events {
	worker_connections 7680;
	multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	server_names_hash_bucket_size 128;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;
        ssl_session_timeout 1h;
        ssl_session_cache shared:SSL:5m;
        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##



	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	server {
		listen [::]:80 ipv6only=on;
        listen [::]:443 ssl http2 ipv6only=on;
        listen 0.0.0.0:80;
        listen 0.0.0.0:443 ssl http2;

        server_name _;

        resolver local=on;

        set $target '';
        set $certificate 'resty-auto-ssl-fallback.crt';
        set $privatekey 'resty-auto-ssl-fallback.key';
        access_by_lua '
            local key = ngx.var.host
            if not key then
                ngx.log(ngx.ERR, "no hostname found")
                return ngx.exit(400)
            end

            local cjson = require "cjson"
            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeout(1000) -- 1 second

            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
                ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                return ngx.exit(500)
            end

            local info, err = red:get(key)
            if not info then
                ngx.log(ngx.ERR, "failed to get redis key: ", err)
                return ngx.exit(500)
            end

            if info == ngx.null then
                ngx.log(ngx.ERR, "no host found for key ", key)
                return ngx.exit(400)
            end

            local entry = cjson.decode(info) -- {"values":[{"host": "127.0.0.1", "path": "/test"}, certificate:"", privatekey: ""}
            local list = entry.values
            local most = 0
            local host = ""
            for _, entry in ipairs(list) do
            	local len = string.len(string.match(ngx.var.request_uri, "^" .. entry.path))
            	if len  > most then
            		most = len
            		host = entry.host
            	end
            end

             if host == "" then
                ngx.log(ngx.ERR, "no path found in ", cjson.encode(info), " for ", ngx.var.request_uri)
                return ngx.exit(404)
            end
            ngx.var.target = host
        ';

		location / {
            proxy_pass http://$target;
        }

        ssl_certificate_by_lua_block {
            local ssl = require "ngx.ssl"

            local sni, err = ssl.server_name()
            if err then
                ngx.log(ngx.ERR, "could not retrieve Server Name Indication: ", err)
                return
            end

            local cjson = require "cjson"
            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeout(1000) -- 1 second

            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
                ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                return ngx.exit(500)
            end

            local info, err = red:get(sni)
            if not info then
                ngx.log(ngx.ERR, "failed to get redis key: ", sni, err)
                return ngx.exit(500)
            end

            if info == ngx.null then
                ngx.log(ngx.ERR, "no host found for key ", key)
                return ngx.exit(400)
            end

            local entry = cjson.decode(info) -- {"values":[{"host": "127.0.0.1", "path": "/test"}, certificate:"", privatekey: ""}
            local crtPEM = entry.certificate
            local privPEM = entry.privatekey

            local cert, err = ssl.parse_pem_cert(crtPEM)
            if not cert then
                ngx.log(ngx.ERR, "could not parse PEM certificate: ", err)
                return
            end

            local key, err = ssl.parse_pem_priv_key(privPEM)
            if not key then
                ngx.log(ngx.ERR, "could not parse PEM private key: ", err)
            end

            local ok, err = ssl.clear_certs()
            if not ok then
              ngx.log(ngx.ERR, "could not clear existing (default) certificates: ", err)
              return
            end

            ok, err = ssl.set_cert(cert)
            if not ok then
              ngx.log(ngx.ERR, "could not set configured certificate: ", err)
              return
            end

            ok, err = ssl.set_priv_key(key)
            if not ok then
              ngx.log(ngx.ERR, "could not set configured private key: ", err)
              return
            end
        }

        ssl_certificate /etc/ssl/private/$certificate;
        ssl_certificate_key /etc/ssl/private/$privatekey;
	}

	server {
    	listen 0.0.0.0:80;
        server_name k8s-internal;

		charset utf-8;
    	charset_types application/json;
    	default_type application/json;

    	location /health_check {
			content_by_lua_block {
        		ngx.status = ngx.HTTP_OK  
				ngx.say("{\"healthy\":true}")
				return ngx.exit(ngx.HTTP_OK)  
			}
    	}
	}
}
